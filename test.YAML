AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Lambda with HTTP API gateway demo stack

Resources:
  BackRestaurante:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: API Gateway para el restaurante
      ProtocolType: HTTP

  RestauranteApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref BackRestaurante
      StageName: live
      Description: Live Stage
      AutoDeploy: true

  lambdaReservas:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: "nodejs12.x"
      Role: arn:aws:iam::974199960402:role/service-role/restaurante
      InlineCode: |
        const AWS = require("aws-sdk");

        const dynamo = new AWS.DynamoDB.DocumentClient();

        var CUSTOMEPOCH = 1300000000000; // artificial epoch
        function generateRowId(shardId /* range 0-64 for shard/slot */) {
          var ts = new Date().getTime() - CUSTOMEPOCH; // limit to recent
          var randid = Math.floor(Math.random() * 512);
          ts = (ts * 64);   // bit-shift << 6
          ts = ts + shardId;
          return (ts * 512) + randid;
        } 
        exports.handler = async (event, context) => {

        let body;
        let statusCode=200

        try {
            switch (event.routeKey) {
                case "GET /Reservas":
                    body = await dynamo.scan({ TableName: "reservas" }).promise();
                    break;
                case "PUT /Reservas":
                    let requestJSON = JSON.parse(event.body);
                    let newPrimaryHashKey = requestJSON.nombre + generateRowId(4);
                    await dynamo
                      .put({
                        TableName: "reservas",
                        Item: {
                          id: newPrimaryHashKey,
                          mesa: requestJSON.mesa,
                          nombre: requestJSON.nombre,
                          cedula: requestJSON.cedula,
                          numeroPersonas: requestJSON.numeroPersonas,
                          fecha: requestJSON.fecha,
                          hora: requestJSON.hora
                        }
                      })
                      .promise();
                    body = `Put item ${newPrimaryHashKey}`;
                    break;
                default:
                throw new Error(`Unsupported route: "${event.routeKey}"`);
        }
            
        }catch(err){
                
            statusCode = 400;
            body = err.message;
            
        }finally {
            
            body = JSON.stringify(body);

        }
            

        const response = {
            statusCode: statusCode,
            body: body,
        };
        return response;
        };
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref lambdaReservas
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  IntegrationReserva:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref BackRestaurante
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${lambdaReservas.Arn}/invocations"

  Reservas:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackRestaurante
      RouteKey: "GET /Reservas"
      AuthorizationType: OPEN
      Target: !Join
        - /
        - - integrations
          - !Ref IntegrationReserva

  createReservas:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref BackRestaurante
      RouteKey: "PUT /Reservas"
      AuthorizationType: OPEN
      Target: !Join
        - /
        - - integrations
          - !Ref IntegrationReserva
